{
  "appName": "RealTimeDriver",
  "sessionType": "local[*]",
  "process": {
    "ZoomMeetingdata": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-meeting",
          "data_format": "json",
          "topic": "zoom_webhook",
          "offsets_per_trigger": "1000",
          "alias": "zoom",
          "schema": "zoommeeting",
          "schema_location": "src/main/resources/schema",
          "startingOffsets": "latest"
        }
      ],
      "query": "Select A.*,case when A.endTimeInSeconds is null then 0 else (A.endTimeInSeconds-A.startTimeInSeconds)/60 end as durationInMinutes,case when (A.event='meeting.started' or A.payload.object.duration=-1) then 'NA' else (case when A.payload.object.duration >= ((A.endTimeInSeconds-A.startTimeInSeconds)/60) then \"On-Time\" else \"Over-Time\" end ) end as timeliness,case when (A.event='meeting.started' or A.payload.object.duration=-1) then 'NA'  when ((A.endTimeInSeconds-A.startTimeInSeconds)/60) < 10 then '<10 minutes' when (((A.endTimeInSeconds-A.startTimeInSeconds)/60) >= 10 and ((A.endTimeInSeconds-A.startTimeInSeconds)/60) <=30) then '10-30 minutes' when (((A.endTimeInSeconds-A.startTimeInSeconds)/60) > 30 and ((A.endTimeInSeconds-A.startTimeInSeconds)/60) <=60) then '31-60 minutes' else '60+ minutes' end as breakDownByDuration from (Select *,concat_ws('~~',payload.object.id,payload.object.uuid) as meetingUniqueId,case when event='meeting.ended' then unix_timestamp(payload.object.end_time,\"yyyy-MM-dd'T'HH:mm:ss'Z'\") else null end as endTimeInSeconds,unix_timestamp(payload.object.start_time,\"yyyy-MM-dd'T'HH:mm:ss'Z'\") as startTimeInSeconds from zoom where event in ('meeting.started','meeting.ended')) A",
      "output": [
        {
          "query": "select * from #process",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToConsole"
        },
        {
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToElastic",
          "query": "select * from #process",
          "wan_only": "true",
          "upsert": "upsert",
          "mapping_id": "meetingUniqueId",
          "port": "9200",
          "retryOnConflict": "2",
          "nodes": "*",
          "index": "zoommeeting",
          "user": "",
          "password": ""
        }
      ]
    },
    "ZoomParticipantdata": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-participant",
          "data_format": "json",
          "topic": "zoom_webhook",
          "offsets_per_trigger": "1000",
          "alias": "zoomparticipant",
          "schema": "zoomparticipant",
          "schema_location": "src/main/resources/schema",
          "startingOffsets": "latest"
        }
      ],
      "query": "Select *,concat_ws('~~',payload.object.id,payload.object.uuid,payload.object.participant.user_id) as participantUniqueId from zoomparticipant where event in ('meeting.participant_joined','meeting.participant_left')",
      "output": [
        {
          "query": "select * from #process",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToConsole"
        },
        {
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToElastic",
          "query": "select * from #process",
          "wan_only": "true",
          "upsert": "upsert",
          "mapping_id": "participantUniqueId",
          "port": "9200",
          "retryOnConflict": "2",
          "nodes": "",
          "index": "zoomparticipant",
          "user": "",
          "password": ""
        }
      ]
    },
    "ZoomParticipantDevice": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-participant-device",
          "data_format": "json",
          "topic": "zoom_webhook",
          "offsets_per_trigger": "1000",
          "alias": "zoomparticipantdevice",
          "schema": "zoommeeting",
          "schema_location": "src/main/resources/schema",
          "startingOffsets": "latest"
        }
      ],
      "query": "Select payload.object.id as meeting_id,payload.object.start_time as start_time from zoomparticipantdevice where event ='meeting.ended'",
      "output": [
        {
          "query": "select * from #process",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteZoomParticipantDevice",
          "topic": "zoom_participant_meta",
          "bootstrap_servers": "",
          "test": "false",
          "api_secret": "",
          "api_key": "",
          "data_format": "text"
        }
      ]
    },
    "ZoomParticipantDeviceDataElastic": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-participant-device-data",
          "data_format": "json",
          "topic": "zoom_participant_meta",
          "offsets_per_trigger": "1000",
          "alias": "zoomparticipantdeviceData",
          "schema": "zoomparticipantdevicedata",
          "schema_location": "src/main/resources/schema",
          "filter_value": "device",
          "startingOffsets": "latest"
        }
      ],
      "query": "select * from zoomparticipantdeviceData",
      "output": [
        {
          "query": "select * from #process",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToConsole"
        },
        {
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToElastic",
          "query": "select * from #process",
          "wan_only": "true",
          "port": "9200",
          "nodes": "",
          "index": "zoomparticipantdevice",
          "user": "",
          "password": ""
        }
      ]
    },
    "ZoomParticipantCountData": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-participant-count",
          "data_format": "text",
          "topic": "zoom_participant_meta",
          "offsets_per_trigger": "1000",
          "alias": "zoomparticipantCountData",
          "filter_value": "count",
          "startingOffsets": "latest"
        }
      ],
      "query": "Select case when splitedArray[2]=1 then '1 Participant' \nwhen splitedArray[2]=2 then '2 Participant'\nwhen splitedArray[2]=3 then '3 Participant'\nwhen splitedArray[2]=4 then '4 Participant'\nwhen splitedArray[2]=5 then '5 Participant'\nwhen splitedArray[2]=6 then '6 Participant'\nwhen splitedArray[2]=7 then '7 Participant'\nwhen splitedArray[2]=8 then '8 Participant'\nwhen splitedArray[2]=9 then '9 Participant'\nwhen splitedArray[2]=10 then '10 Participant'\nwhen (splitedArray[2]>10 and splitedArray[2] <=20) then '11-20 Participant' \nwhen (splitedArray[2]>20 and splitedArray[2] <=50) then '20-50 Participant' \nelse '50+ Participant' end as participantBucket,splitedArray[0] as meetingId, splitedArray[1] as startTime,concat_ws('~~',splitedArray[0],splitedArray[1]) as id from\n(select split(value,'~~') as splitedArray from zoomparticipantCountData)",
      "output": [
        {
          "query": "select * from #process",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToConsole"
        },
        {
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToElastic",
          "query": "select * from #process",
          "wan_only": "true",
          "upsert": "upsert",
          "mapping_id": "id",
          "port": "9200",
          "retryOnConflict": "2",
          "nodes": "",
          "index": "zoomparticipantcountdata",
          "user": "",
          "password": ""
        }
      ]
    },
    "ZoomParticipantDeviceFailData": {
      "class": "com.debajit.dataProcessor.processor.realtimeFetch.BasicReal",
      "input": [
        {
          "format": "kafka",
          "bootstrap_servers": "",
          "group_id": "zoom-participant-device-fail-data",
          "data_format": "text",
          "topic": "zoom_participant_meta_fail",
          "offsets_per_trigger": "1000",
          "alias": "zoomparticipantdevicefaildata",
          "startingOffsets": "latest"
        }
      ],
      "query": "Select A.splitedArray[0] as meeting_id,A.splitedArray[1] as start_time,CAST((A.splitedArray[2]/1000) AS TIMESTAMP)  as update_time,(NOW() - INTERVAL 2 MINUTE) as comparisionTime from (select split(value,'~~') as splitedArray from zoomparticipantdevicefaildata)A",
      "output": [
        {
          "query": "select * from #process where update_time < comparisionTime",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteZoomParticipantDevice",
          "topic": "zoom_participant_meta",
          "bootstrap_servers": "",
          "test": "false",
          "api_secret": "",
          "api_key": "",
          "data_format": "text"
        },
        {
          "query": "select concat_ws('~~',meeting_id,start_time,unix_timestamp(update_time,\"yyyy-MM-dd HH:mm:ss.SSS'\")) as value,'fail' as key from #process where update_time >= comparisionTime",
          "action_class": "com.debajit.dataProcessor.processor.action.WriteToKafka",
          "topic": "zoom_participant_meta_fail",
          "bootstrap_servers": "",
          "data_format": "text"
        }
      ]
    }
  }
}
